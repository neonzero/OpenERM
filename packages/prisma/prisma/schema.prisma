generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Tenant {
  id             String           @id @default(uuid())
  name           String
  slug           String           @unique
  timeZone       String           @default("UTC")
  locale         String?          @default("en-US")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  users          User[]
  riskCategories RiskCategory[]
  risks          Risk[]
  auditEngagements AuditEngagement[]
  controls       Control[]
  auditTrail     AuditTrailEvent[]
  integrationSecrets TenantIntegrationSecret?
}

model TenantIntegrationSecret {
  id        String  @id @default(uuid())
  tenantId  String  @unique
  oidcJson  Bytes
  scimJson  Bytes?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model User {
  id           String          @id @default(uuid())
  tenantId     String
  email        String          @unique
  displayName  String
  locale       String?         @default("en-US")
  timeZone     String?         @default("UTC")
  status       UserStatus      @default(ACTIVE)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  lastLoginAt  DateTime?
  authSubject  String?         @unique
  tenant       Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roles        RoleAssignment[]
  authoredRisks Risk[]         @relation("RiskOwner")
  authoredAssessments RiskAssessment[]
  auditOwnerships AuditEngagement[] @relation("AuditOwner")
  assignedWorkpapers AuditWorkpaper[] @relation("WorkpaperAssignee")
  findingsAssigned AuditFinding[] @relation("FindingAssignee")
  workflowEvents AuditTrailEvent[] @relation("EventActor")
}

enum UserStatus {
  ACTIVE
  INVITED
  DISABLED
}

model RoleAssignment {
  id        String   @id @default(uuid())
  userId    String
  role      String
  grantedBy String?
  grantedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
}

model RiskCategory {
  id        String  @id @default(uuid())
  tenantId  String
  name      String
  order     Int      @default(0)
  tenant    Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  risks     Risk[]

  @@unique([tenantId, name])
}

model Risk {
  id            String           @id @default(uuid())
  tenantId      String
  categoryId    String
  referenceId   String
  title         String
  description   String?
  inherentScore Float
  residualScore Float?
  status        RiskStatus       @default(DRAFT)
  ownerId       String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  reviewDate    DateTime?
  tags          String[]         @default([])
  sensitiveBlob Bytes?
  tenant        Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category      RiskCategory     @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  owner         User?            @relation("RiskOwner", fields: [ownerId], references: [id])
  assessments   RiskAssessment[]
  mitigations   MitigationPlan[]
  controls      ControlRiskLink[]
  auditTrail    AuditTrailEvent[]

  @@index([tenantId, referenceId], map: "risk_reference_idx")
  @@unique([tenantId, referenceId])
}

enum RiskStatus {
  DRAFT
  ASSESSMENT
  MITIGATION
  MONITORING
  CLOSED
}

model Control {
  id              String           @id @default(uuid())
  tenantId        String
  name            String
  description     String?
  controlType     ControlType
  frequency       String?
  ownerId         String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  owner           User?            @relation(fields: [ownerId], references: [id])
  risks           ControlRiskLink[]
  assessments     ControlAssessment[]
}

enum ControlType {
  PREVENTIVE
  DETECTIVE
  CORRECTIVE
  DIRECTIONAL
}

model ControlRiskLink {
  id        String  @id @default(uuid())
  tenantId  String
  riskId    String
  controlId String
  tenant    Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  risk      Risk    @relation(fields: [riskId], references: [id], onDelete: Cascade)
  control   Control @relation(fields: [controlId], references: [id], onDelete: Cascade)

  @@unique([riskId, controlId])
}

model RiskAssessment {
  id             String        @id @default(uuid())
  tenantId       String
  riskId         String
  assessorId     String
  assessmentDate DateTime      @default(now())
  methodology    String
  inherentScore  Float
  residualScore  Float?
  status         AssessmentStatus @default(DRAFT)
  notes          String?
  attachments    AssessmentArtifact[]
  risk           Risk          @relation(fields: [riskId], references: [id], onDelete: Cascade)
  assessor       User          @relation(fields: [assessorId], references: [id], onDelete: Restrict)
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, riskId])
}

enum AssessmentStatus {
  DRAFT
  IN_REVIEW
  APPROVED
  ARCHIVED
}

model TenantRiskPreference {
  tenantId          String  @id
  likelihoodAppetite Float?
  impactAppetite    Float?
  residualAppetite  Float?
  velocityWeight    Float? @default(0)
  appetiteMatrix    Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model RiskIndicator {
  id              String          @id @default(uuid())
  tenantId        String
  riskId          String
  name            String
  description     String?
  cadence         String?
  direction       IndicatorDirection @default(DECREASE)
  threshold       Float?
  target          Float?
  status          IndicatorStatus  @default(ON_TRACK)
  lastValue       Float?
  lastEvaluatedAt DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  risk            Risk             @relation(fields: [riskId], references: [id], onDelete: Cascade)
  updates         RiskIndicatorUpdate[]

  @@index([tenantId, riskId])
}

model RiskIndicatorUpdate {
  id           String   @id @default(uuid())
  indicatorId  String
  recordedAt   DateTime @default(now())
  value        Float
  breached     Boolean  @default(false)
  note         String?
  indicator    RiskIndicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)
}

enum IndicatorDirection {
  INCREASE
  DECREASE
  RANGE
}

enum IndicatorStatus {
  ON_TRACK
  WARNING
  BREACHED
}

model AssessmentArtifact {
  id           String   @id @default(uuid())
  assessmentId String
  storageKey   String
  hash         String
  fileName     String
  uploadedAt   DateTime  @default(now())
  assessment   RiskAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
}

model MitigationPlan {
  id           String        @id @default(uuid())
  tenantId     String
  riskId       String
  ownerId      String?
  title        String
  strategy     String
  dueDate      DateTime?
  status       MitigationStatus @default(PLANNED)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  tenant       Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  risk         Risk           @relation(fields: [riskId], references: [id], onDelete: Cascade)
  owner        User?          @relation(fields: [ownerId], references: [id])
  actions      RemediationAction[]
}

enum MitigationStatus {
  PLANNED
  IN_PROGRESS
  EFFECTIVE
  CLOSED
}

model RiskQuestionnaire {
  id        String               @id @default(uuid())
  tenantId  String
  title     String
  period    String
  scope     String?
  audience  String[]
  status    QuestionnaireStatus  @default(DRAFT)
  dueDate   DateTime?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  tenant    Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  questions RiskQuestionnaireQuestion[]
  responses RiskQuestionnaireResponse[]

  @@index([tenantId, period])
}

model RiskQuestionnaireQuestion {
  id               String              @id @default(uuid())
  questionnaireId  String
  prompt           String
  responseType     QuestionType
  options          String[] @default([])
  sortOrder        Int
  questionnaire    RiskQuestionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
}

model RiskQuestionnaireResponse {
  id              String                   @id @default(uuid())
  questionnaireId String
  respondentId    String?
  status          QuestionnaireResponseStatus @default(DRAFT)
  submittedAt     DateTime?
  answers         Json
  questionnaire   RiskQuestionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  respondent      User?             @relation(fields: [respondentId], references: [id])
}

enum QuestionnaireStatus {
  DRAFT
  SENT
  CLOSED
}

enum QuestionnaireResponseStatus {
  DRAFT
  SUBMITTED
}

enum QuestionType {
  TEXT
  MULTI_SELECT
  SCALE
}

model RemediationAction {
  id              String        @id @default(uuid())
  mitigationId    String
  description     String
  ownerId         String?
  status          RemediationStatus @default(OPEN)
  dueDate         DateTime?
  completedAt     DateTime?
  mitigation      MitigationPlan   @relation(fields: [mitigationId], references: [id], onDelete: Cascade)
  owner           User?            @relation(fields: [ownerId], references: [id])
}

enum RemediationStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model AuditEngagement {
  id            String          @id @default(uuid())
  tenantId      String
  code          String
  name          String
  description   String?
  status        AuditStatus      @default(PLANNING)
  startDate     DateTime?
  endDate       DateTime?
  ownerId       String?
  riskId        String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  owner         User?           @relation("AuditOwner", fields: [ownerId], references: [id])
  risk          Risk?           @relation(fields: [riskId], references: [id])
  workpapers    AuditWorkpaper[]
  findings      AuditFinding[]
  auditTrail    AuditTrailEvent[]

  @@unique([tenantId, code])
}

enum AuditStatus {
  PLANNING
  FIELDWORK
  REVIEW
  REPORTING
  CLOSED
}

model AuditWorkpaper {
  id             String      @id @default(uuid())
  tenantId       String
  engagementId   String
  referenceCode  String
  name           String
  description    String?
  status         WorkpaperStatus @default(IN_PROGRESS)
  assigneeId     String?
  storageKey     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  engagement     AuditEngagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  assignee       User?        @relation("WorkpaperAssignee", fields: [assigneeId], references: [id])
  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  evidence       EvidenceItem[]
}

enum WorkpaperStatus {
  IN_PROGRESS
  IN_REVIEW
  APPROVED
  ARCHIVED
}

model EvidenceItem {
  id           String   @id @default(uuid())
  workpaperId  String
  storageKey   String
  hash         String
  uploadedById String
  uploadedAt   DateTime @default(now())
  metadata     Json
  workpaper    AuditWorkpaper @relation(fields: [workpaperId], references: [id], onDelete: Cascade)
  uploadedBy   User          @relation(fields: [uploadedById], references: [id], onDelete: Restrict)
}

model AuditFinding {
  id             String       @id @default(uuid())
  tenantId       String
  engagementId   String
  title          String
  criteria       String
  condition      String
  cause          String?
  effect         String?
  rating         FindingRating
  status         FindingStatus @default(OPEN)
  assigneeId     String?
  dueDate        DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  engagement     AuditEngagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  assignee       User?         @relation("FindingAssignee", fields: [assigneeId], references: [id])
  tenant         Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  recommendations Recommendation[]
  auditTrail     AuditTrailEvent[]
}

enum FindingRating {
  LOW
  MODERATE
  HIGH
  CRITICAL
}

enum FindingStatus {
  OPEN
  IN_PROGRESS
  REMEDIATED
  CLOSED
}

model Recommendation {
  id           String    @id @default(uuid())
  findingId    String
  description  String
  ownerId      String?
  status       RecommendationStatus @default(PROPOSED)
  dueDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  finding      AuditFinding @relation(fields: [findingId], references: [id], onDelete: Cascade)
  owner        User?        @relation(fields: [ownerId], references: [id])
  actionPlans  ActionPlan[]
}

enum RecommendationStatus {
  PROPOSED
  APPROVED
  IMPLEMENTED
  RETIRED
}

model FindingFollowUp {
  id            String         @id @default(uuid())
  tenantId      String
  findingId     String
  evidenceRefs  String[]       @default([])
  status        FollowUpStatus @default(OPEN)
  verifiedById  String?
  verifiedAt    DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  finding       AuditFinding   @relation(fields: [findingId], references: [id], onDelete: Cascade)
  verifiedBy    User?          @relation(fields: [verifiedById], references: [id])
}

enum FollowUpStatus {
  OPEN
  IN_PROGRESS
  READY_FOR_VERIFICATION
  CLOSED
}

model ActionPlan {
  id              String    @id @default(uuid())
  recommendationId String
  description     String
  ownerId         String?
  status          ActionPlanStatus @default(OPEN)
  dueDate         DateTime?
  completedAt     DateTime?
  recommendation  Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  owner           User?          @relation(fields: [ownerId], references: [id])
}

enum ActionPlanStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model AuditableEntity {
  id           String   @id @default(uuid())
  tenantId     String
  name         String
  type         String
  criticality  Int
  riskLinkages String[] @default([])
  lastAudit    DateTime?
  nextDue      DateTime?
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  planItems    AuditPlanItem[]

  @@index([tenantId, type])
}

model AuditPlan {
  id         String          @id @default(uuid())
  tenantId   String
  period     String
  status     AuditPlanStatus @default(DRAFT)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  tenant     Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items      AuditPlanItem[]
  capacities ResourceCapacity[]

  @@index([tenantId, period])
}

model AuditPlanItem {
  id                String             @id @default(uuid())
  planId            String
  engagementId      String?
  auditableEntityId String?
  priority          Int
  status            AuditPlanItemStatus @default(PLANNED)
  plannedStart      DateTime?
  plannedEnd        DateTime?
  plan              AuditPlan         @relation(fields: [planId], references: [id], onDelete: Cascade)
  engagement        AuditEngagement?  @relation(fields: [engagementId], references: [id])
  auditableEntity   AuditableEntity?  @relation(fields: [auditableEntityId], references: [id])
}

enum AuditPlanStatus {
  DRAFT
  APPROVED
  IN_PROGRESS
  COMPLETED
}

enum AuditPlanItemStatus {
  PLANNED
  SCHEDULED
  IN_PROGRESS
  COMPLETE
  DROPPED
}

model ResourceCapacity {
  id            String   @id @default(uuid())
  tenantId      String
  planId        String
  role          String
  hoursAvailable Float
  utilization   Float?  @default(0)
  plan          AuditPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, role])
}

model AuditTrailEvent {
  id              String    @id @default(uuid())
  tenantId        String
  actorId         String?
  scope           AuditTrailScope
  entityId        String
  entityType      String
  action          String
  metadata        Json?
  createdAt       DateTime  @default(now())
  tenant          Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  actor           User?     @relation("EventActor", fields: [actorId], references: [id])
}

enum AuditTrailScope {
  RISK
  CONTROL
  ASSESSMENT
  MITIGATION
  ENGAGEMENT
  WORKPAPER
  FINDING
  ACTION_PLAN
}

model RacmEntry {
  id           String    @id @default(uuid())
  tenantId     String
  engagementId String
  process      String
  riskId       String?
  controlId    String?
  assertion    String?
  testStepId   String?
  version      Int       @default(1)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  engagement   AuditEngagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  tenant       Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  risk         Risk?     @relation(fields: [riskId], references: [id])
  control      Control?  @relation(fields: [controlId], references: [id])
  testStep     AuditProgramStep? @relation(fields: [testStepId], references: [id])
}

model AuditProgram {
  id           String   @id @default(uuid())
  tenantId     String
  engagementId String
  name         String
  version      Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  engagement   AuditEngagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  steps        AuditProgramStep[]

  @@unique([tenantId, engagementId, version])
}

model AuditProgramStep {
  id          String        @id @default(uuid())
  programId   String
  title       String
  description String?
  procedure   String?
  evidence    String?
  sortOrder   Int
  program     AuditProgram  @relation(fields: [programId], references: [id], onDelete: Cascade)
  racmEntries RacmEntry[]
}

model TimesheetEntry {
  id           String         @id @default(uuid())
  tenantId     String
  userId       String
  engagementId String
  entryDate    DateTime
  hours        Float
  activity     String?
  status       TimesheetStatus @default(DRAFT)
  approverId   String?
  approvedAt   DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  tenant       Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  engagement   AuditEngagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  approver     User?           @relation(fields: [approverId], references: [id])

  @@index([tenantId, engagementId])
}

enum TimesheetStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

model ReportTemplate {
  id          String              @id @default(uuid())
  tenantId    String
  name        String
  description String?
  type        ReportTemplateType
  sections    Json
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  tenant      Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  reports     GeneratedReport[]

  @@index([tenantId, type])
}

model GeneratedReport {
  id          String   @id @default(uuid())
  tenantId    String
  templateId  String
  context     Json
  fileRef     String?
  generatedAt DateTime @default(now())
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  template    ReportTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

enum ReportTemplateType {
  RISK_REGISTER
  AUDIT_ENGAGEMENT
}

model IntegrationEvent {
  id          String   @id @default(uuid())
  tenantId    String
  type        String
  payload     Json
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, publishedAt])
}

model RefreshToken {
  id           String   @id @default(uuid())
  tenantId     String
  userId       String
  tokenHash    String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  revokedAt    DateTime?
  metadata     Json?
  tenant       Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId, userId])
  @@index([expiresAt])
}

model ApiKey {
  id          String   @id @default(uuid())
  tenantId    String
  name        String
  tokenHash   String
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  createdById String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Restrict)

  @@index([tenantId, name])
}

model QueueJob {
  id         String   @id @default(uuid())
  tenantId   String
  queue      String
  status     JobStatus @default(PENDING)
  payload    Json
  attempts   Int       @default(0)
  lastError  String?
  runAt      DateTime? @default(now())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tenant     Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([queue, status])
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
